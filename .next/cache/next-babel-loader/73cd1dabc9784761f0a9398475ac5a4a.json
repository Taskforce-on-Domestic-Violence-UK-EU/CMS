{"ast":null,"code":"import dbConnect from \"../../../utils/dbConnect\";\nimport Workshop from \"../../../models/workshop\";\nexport const getWorkshops = async () => {\n  const workshop = await Workshop.find({});\n  return workshop;\n};\nexport const createWorkshop = async () => {\n  const workshop = await new Workshop({\n    title: \"Covid 19 Task Force on Domestic Violence UK & EU\",\n    author: \"Task Force UK & EU\",\n    date: \"July 20, 2020\",\n    description: \"Supporting survivors of domestic violence and the work of DV charities in the UK & EU\",\n    image: \"https://cdn.dribbble.com/users/2893989/screenshots/13928032/media/9784cf82f0c941e95a08379155b860ef.png\",\n    tags: [\"Social Justice\", \"Equality\", \"Journalism\"],\n    content: [],\n    articles: [],\n    organizations: []\n  });\n  return workshop;\n};\nexport default (async (req, res) => {\n  const {\n    method,\n    body\n  } = req;\n  await dbConnect();\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const workshops = await getWorkshops();\n        res.status(200).json({\n          status: \"success\",\n          data: workshops\n        });\n      } catch (error) {\n        res.status(400).json({\n          status: \"error\",\n          message: error.message\n        });\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const workshop = await createWorkshop();\n        await workshop.save();\n        res.status(201).json({\n          status: \"success\",\n          data: workshop\n        });\n      } catch (error) {\n        res.status(500).json({\n          status: \"error\",\n          message: error.message\n        });\n      }\n\n      break;\n\n    default:\n      res.status(500).json({\n        status: \"error\",\n        message: \"Default error occured, this is most likey since the request `method` was not handled or unspecified\"\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/CMS/pages/api/workshops/index.js"],"names":["dbConnect","Workshop","getWorkshops","workshop","find","createWorkshop","title","author","date","description","image","tags","content","articles","organizations","req","res","method","body","workshops","status","json","data","error","message","save"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,YAAY;AACtC,QAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,CAAc,EAAd,CAAvB;AACA,SAAOD,QAAP;AACD,CAHM;AAKP,OAAO,MAAME,cAAc,GAAG,YAAY;AACxC,QAAMF,QAAQ,GAAG,MAAM,IAAIF,QAAJ,CAAa;AAClCK,IAAAA,KAAK,EAAE,kDAD2B;AAElCC,IAAAA,MAAM,EAAE,oBAF0B;AAGlCC,IAAAA,IAAI,EAAE,eAH4B;AAIlCC,IAAAA,WAAW,EACT,uFALgC;AAMlCC,IAAAA,KAAK,EACH,wGAPgC;AAQlCC,IAAAA,IAAI,EAAE,CAAC,gBAAD,EAAmB,UAAnB,EAA+B,YAA/B,CAR4B;AASlCC,IAAAA,OAAO,EAAE,EATyB;AAUlCC,IAAAA,QAAQ,EAAE,EAVwB;AAWlCC,IAAAA,aAAa,EAAE;AAXmB,GAAb,CAAvB;AAaA,SAAOX,QAAP;AACD,CAfM;AAiBP,gBAAe,OAAOY,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAmBH,GAAzB;AAEA,QAAMf,SAAS,EAAf;;AAEA,UAAQiB,MAAR;AACE,SAAK,KAAL;AACE,UAAI;AACF,cAAME,SAAS,GAAG,MAAMjB,YAAY,EAApC;AACAc,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,UAAAA,MAAM,EAAE,SAAV;AAAqBE,UAAAA,IAAI,EAAEH;AAA3B,SAArB;AACD,OAHD,CAGE,OAAOI,KAAP,EAAc;AACdP,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,UAAAA,MAAM,EAAE,OAAV;AAAmBI,UAAAA,OAAO,EAAED,KAAK,CAACC;AAAlC,SAArB;AACD;;AACD;;AAEF,SAAK,MAAL;AACE,UAAI;AACF,cAAMrB,QAAQ,GAAG,MAAME,cAAc,EAArC;AACA,cAAMF,QAAQ,CAACsB,IAAT,EAAN;AACAT,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,UAAAA,MAAM,EAAE,SADW;AAEnBE,UAAAA,IAAI,EAAEnB;AAFa,SAArB;AAID,OAPD,CAOE,OAAOoB,KAAP,EAAc;AACdP,QAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,UAAAA,MAAM,EAAE,OADW;AAEnBI,UAAAA,OAAO,EAAED,KAAK,CAACC;AAFI,SAArB;AAID;;AACD;;AAEF;AACER,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,QAAAA,MAAM,EAAE,OADW;AAEnBI,QAAAA,OAAO,EACL;AAHiB,OAArB;AAKA;AAhCJ;AAkCD,CAvCD","sourcesContent":["import dbConnect from \"../../../utils/dbConnect\";\nimport Workshop from \"../../../models/workshop\";\n\nexport const getWorkshops = async () => {\n  const workshop = await Workshop.find({});\n  return workshop;\n};\n\nexport const createWorkshop = async () => {\n  const workshop = await new Workshop({\n    title: \"Covid 19 Task Force on Domestic Violence UK & EU\",\n    author: \"Task Force UK & EU\",\n    date: \"July 20, 2020\",\n    description:\n      \"Supporting survivors of domestic violence and the work of DV charities in the UK & EU\",\n    image:\n      \"https://cdn.dribbble.com/users/2893989/screenshots/13928032/media/9784cf82f0c941e95a08379155b860ef.png\",\n    tags: [\"Social Justice\", \"Equality\", \"Journalism\"],\n    content: [],\n    articles: [],\n    organizations: [],\n  });\n  return workshop;\n};\n\nexport default async (req, res) => {\n  const { method, body } = req;\n\n  await dbConnect();\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const workshops = await getWorkshops();\n        res.status(200).json({ status: \"success\", data: workshops });\n      } catch (error) {\n        res.status(400).json({ status: \"error\", message: error.message });\n      }\n      break;\n\n    case \"POST\":\n      try {\n        const workshop = await createWorkshop();\n        await workshop.save();\n        res.status(201).json({\n          status: \"success\",\n          data: workshop,\n        });\n      } catch (error) {\n        res.status(500).json({\n          status: \"error\",\n          message: error.message,\n        });\n      }\n      break;\n\n    default:\n      res.status(500).json({\n        status: \"error\",\n        message:\n          \"Default error occured, this is most likey since the request `method` was not handled or unspecified\",\n      });\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}