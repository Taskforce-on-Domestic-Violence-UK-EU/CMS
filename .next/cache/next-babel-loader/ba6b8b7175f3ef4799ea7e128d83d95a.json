{"ast":null,"code":"import dbConnect from \"../../../utils/dbConnect\";\nimport Article from \"../../../models/article\";\nexport const getArticles = async () => {\n  const articles = await Article.find({});\n  return articles;\n};\nexport const createArticle = async () => {\n  const article = await new Article({\n    title: \"New Article\",\n    author: \"Julia New-Author\",\n    date: \"July 20, 2065\",\n    description: \"This is a new article, read it an you will have read a new article\",\n    image: \"https://cdn.dribbble.com/users/2893989/screenshots/14113447/media/0e7f1e1af0b9354f272dee113bef150e.png\",\n    tags: [\"Social Justice\", \"Equality\", \"Journalism\"],\n    content: [{\n      type: \"text\",\n      content: \"Hello, this is a new article\"\n    }]\n  });\n  return article;\n};\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method,\n    body\n  } = req;\n  await dbConnect();\n\n  switch (method) {\n    case \"POST\":\n      try {\n        const article = await createArticle();\n        await article.save();\n        res.status(201).json({\n          status: \"success\",\n          data: article\n        });\n      } catch (error) {\n        res.status(500).json({\n          status: \"error\",\n          message: error.message\n        });\n      }\n\n      break;\n\n    case \"GET\":\n      try {\n        const articles = await getArticles();\n        res.status(200).json({\n          status: \"success\",\n          data: articles\n        });\n      } catch (error) {\n        res.status(400).json({\n          status: \"error\",\n          message: error.message\n        });\n      }\n\n      break;\n\n    default:\n      res.status(500).json({\n        status: \"error\",\n        message: \"Default error occured, this is most likey since the request `method` was not handled or unspecified\"\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/CMS/pages/api/articles/index.js"],"names":["dbConnect","Article","getArticles","articles","find","createArticle","article","title","author","date","description","image","tags","content","type","req","res","query","id","method","body","save","status","json","data","error","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAY;AACrC,QAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACG,IAAR,CAAa,EAAb,CAAvB;AACA,SAAOD,QAAP;AACD,CAHM;AAKP,OAAO,MAAME,aAAa,GAAG,YAAY;AACvC,QAAMC,OAAO,GAAG,MAAM,IAAIL,OAAJ,CAAY;AAChCM,IAAAA,KAAK,EAAE,aADyB;AAEhCC,IAAAA,MAAM,EAAE,kBAFwB;AAGhCC,IAAAA,IAAI,EAAE,eAH0B;AAIhCC,IAAAA,WAAW,EACT,oEAL8B;AAMhCC,IAAAA,KAAK,EACH,wGAP8B;AAQhCC,IAAAA,IAAI,EAAE,CAAC,gBAAD,EAAmB,UAAnB,EAA+B,YAA/B,CAR0B;AAShCC,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBD,MAAAA,OAAO,EAAE;AAAzB,KAAD;AATuB,GAAZ,CAAtB;AAWA,SAAOP,OAAP;AACD,CAbM;AAeP,gBAAe,OAAOS,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA,MAFI;AAGJC,IAAAA;AAHI,MAIFL,GAJJ;AAMA,QAAMf,SAAS,EAAf;;AAEA,UAAQmB,MAAR;AACE,SAAK,MAAL;AACE,UAAI;AACF,cAAMb,OAAO,GAAG,MAAMD,aAAa,EAAnC;AACA,cAAMC,OAAO,CAACe,IAAR,EAAN;AACAL,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,UAAAA,MAAM,EAAE,SADW;AAEnBE,UAAAA,IAAI,EAAElB;AAFa,SAArB;AAID,OAPD,CAOE,OAAOmB,KAAP,EAAc;AACdT,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,UAAAA,MAAM,EAAE,OADW;AAEnBI,UAAAA,OAAO,EAAED,KAAK,CAACC;AAFI,SAArB;AAID;;AACD;;AAEF,SAAK,KAAL;AACE,UAAI;AACF,cAAMvB,QAAQ,GAAG,MAAMD,WAAW,EAAlC;AACAc,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,UAAAA,MAAM,EAAE,SAAV;AAAqBE,UAAAA,IAAI,EAAErB;AAA3B,SAArB;AACD,OAHD,CAGE,OAAOsB,KAAP,EAAc;AACdT,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,UAAAA,MAAM,EAAE,OAAV;AAAmBI,UAAAA,OAAO,EAAED,KAAK,CAACC;AAAlC,SAArB;AACD;;AACD;;AAEF;AACEV,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,QAAAA,MAAM,EAAE,OADW;AAEnBI,QAAAA,OAAO,EACL;AAHiB,OAArB;AAKA;AAhCJ;AAkCD,CA3CD","sourcesContent":["import dbConnect from \"../../../utils/dbConnect\";\nimport Article from \"../../../models/article\";\n\nexport const getArticles = async () => {\n  const articles = await Article.find({});\n  return articles;\n};\n\nexport const createArticle = async () => {\n  const article = await new Article({\n    title: \"New Article\",\n    author: \"Julia New-Author\",\n    date: \"July 20, 2065\",\n    description:\n      \"This is a new article, read it an you will have read a new article\",\n    image:\n      \"https://cdn.dribbble.com/users/2893989/screenshots/14113447/media/0e7f1e1af0b9354f272dee113bef150e.png\",\n    tags: [\"Social Justice\", \"Equality\", \"Journalism\"],\n    content: [{ type: \"text\", content: \"Hello, this is a new article\" }],\n  });\n  return article;\n};\n\nexport default async (req, res) => {\n  const {\n    query: { id },\n    method,\n    body,\n  } = req;\n\n  await dbConnect();\n\n  switch (method) {\n    case \"POST\":\n      try {\n        const article = await createArticle();\n        await article.save();\n        res.status(201).json({\n          status: \"success\",\n          data: article,\n        });\n      } catch (error) {\n        res.status(500).json({\n          status: \"error\",\n          message: error.message,\n        });\n      }\n      break;\n\n    case \"GET\":\n      try {\n        const articles = await getArticles();\n        res.status(200).json({ status: \"success\", data: articles });\n      } catch (error) {\n        res.status(400).json({ status: \"error\", message: error.message });\n      }\n      break;\n\n    default:\n      res.status(500).json({\n        status: \"error\",\n        message:\n          \"Default error occured, this is most likey since the request `method` was not handled or unspecified\",\n      });\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}